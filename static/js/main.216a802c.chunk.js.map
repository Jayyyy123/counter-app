{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","rel","href","aria-hidden","style","width","Counter","getBadgeClasses","classes","props","counter","value","formatCount","fontSize","this","onClick","onIncrement","onDecrement","disabled","onDelete","id","Component","Counters","console","log","onReset","counters","onRestart","length","map","key","App","state","handleReset","c","setState","handleDelete","counterId","filter","handleIncrement","index","indexOf","handleRestart","window","location","reload","handleDecrement","Fragment","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.216a802c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\"\n\n// Stateless Functional Component\n\nconst NavBar = ({ totalCounters }) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <link\n        rel=\"stylesheet\"\n        href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n      ></link>\n      <div className=\"navbar-brand\">\n      <i className=\"fa fa-shopping-cart fa-lg m-2\" aria-hidden=\"true\" />\n        <span className=\"badge badge-pill badge-info m-2\" style={{ width: 50 }}>\n          {totalCounters}\n        </span>\n        Items\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-md-1\">\n            <span style={{ fontSize: 24 }} className={this.getBadgeClasses()}>\n              {this.formatCount()}\n            </span>\n          </div>\n          <div className=\"col-md-4\">\n            <button\n              className=\"btn btn-secondary\"\n              onClick={() => this.props.onIncrement(this.props.counter)}\n            >\n              <i className=\"fa fa-plus-circle\" aria-hidden=\"true\" />\n            </button>\n            <button\n              className=\"btn btn-info m-2\"\n              onClick={() => this.props.onDecrement(this.props.counter)}\n              disabled={this.props.counter.value === 0 ? \"disabled\" : \"\"}\n            >\n              <i className=\"fa fa-minus-circle\" aria-hidden=\"true\" />\n            </button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => this.props.onDelete(this.props.counter.id)}\n            >\n              <i className=\"fa fa-trash-o\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getBadgeClasses = () => {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  };\n\n  formatCount = () => {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  };\n}\n\nexport default Counter;","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"Counters - Rendered\");\n    const {\n      onReset,\n      counters,\n      onDelete,\n      onIncrement,\n      onDecrement,\n      onRestart,\n    } = this.props;\n\n    return (\n      <div>\n        <button\n          className=\"btn btn-success m-2\"\n          onClick={onReset}\n          disabled={counters.length === 0 ? \"disabled\" : \"\"}\n        >\n          <i className=\"fa fa-refresh\" aria-hidden=\"true\" />\n        </button>\n        <button\n          className=\"btn btn-primary m-2\"\n          onClick={onRestart}\n          disabled={counters.length !== 0 ? \"disabled\" : \"\"}\n        >\n          <i className=\"fa fa-recycle\" aria-hidden=\"true\" />\n        </button>\n        {counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            counter={counter}\n            onIncrement={onIncrement}\n            onDecrement={onDecrement}\n            onDelete={onDelete}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport { render } from \"@testing-library/react\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n  }\n\n  componentDidMount() {\n    // Ajax Call\n    console.log(\"App - Mounted\");\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters }); // set state of counters\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters }); // set state of counters\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters]; // set counter values\n    const index = counters.indexOf(counter); // set constant index\n    counters[index] = { ...counter }; // set index\n    counters[index].value++; // index increment\n    this.setState({ counters }); // set state of counters\n  };\n\n  handleRestart = () => {\n    window.location.reload();\n  };\n\n  handleDecrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counters[index] };\n    counters[index].value--;\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onRestart={this.handleRestart}\n            onDecrement={this.handleDecrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}